Questions and Exercises: Interfaces
Questions：
1.在本课程的开始，了解了核心集合接口被组织为两个不同的继承树。特别地，一个接口不被认为是true Collection，因此位于其自己的树的顶部。该接口的名称是什么？
A：Map
Map接口中键和值一一映射. 可以通过键来获取值:
	1.给定一个键和一个值，你可以将该值存储在一个Map对象. 之后，你可以通过键来访问对应的值。
	2.当访问的值不存在的时候，方法就会抛出一个NoSuchElementException异常.
	3.当对象的类型和Map里元素类型不兼容的时候，就会抛出一个 ClassCastException异常。
	4.当在不允许使用Null对象的Map中使用Null对象，会抛出一个NullPointerException 异常。
	5.当尝试修改一个只读的Map时，会抛出一个UnsupportedOperationException异常。
	
2.集合框架中的每个接口都使用<E>语法声明，该语法告诉您它是通用的。声明Collection实例时，指定实例将包含的对象类型有什么好处？
A:指定类型可以使编译器在编译时验证放入集合中的对象类型是否正确，减少了运行时的错误。

3.什么接口表示不允许重复元素的集合？
A:Set
	Set:注重独一无二的性质,该体系集合可以知道某物是否已近存在于集合中,不会存储重复的元素
	用于存储无序(存入和取出的顺序不一定相同)元素，值不能重复。
	HashSet:哈希表边存放的是哈希值。HashSet存储元素的顺序并不是按照存入时的顺序, 是按照哈希值来存的所以取数据也是按照哈希值取得。
	HashSet不存入重复元素的规则.使用hashcode和equals.
	HashSet可以去除重复，但是是无序,可以使用TreeSet.
	
	---| Itreable      接口 实现该接口可以使用增强for循环
                ---| Collection        描述所有集合共性的接口
                    ---| List接口        有序，可以重复，有角标的集合
                            ---| ArrayList   
                            ---|  LinkedList
                    ---| Set接口        无序，不可以重复的集合
                            ---| HashSet  线程不安全，存取速度快。底层是以hash表实现的。
                            ---| TreeSet  红-黑树的数据结构，默认对元素进行自然排序（String）
		
4.什么接口构成集合层次结构的根？
A：Collection：是单个集合保存的最大父接口
Collection接口常用方法:
	1. add(E e) : 向集合中添加元素
	2. addAll(Collection<? extends E> c) : 向集合中添加一组数据
	3. clear() ：清空集合数据
	4. contains( Object o) : 查找数据是否存在.(需要使用equals()方法).
	5. remove( Object o) : 删除数据.(需要使用equals()方法).
	6. size() : 取得集合长度
	7. toArray() : 将集合变为对象数组返回
	8. iterator() : 取得Iterator接口对象,用于集合输出.
在实际开发中,我们很少直接使用Collection接口,往往考虑使用它的子接口:List(允许数据重复),Set(不允许数据重复)和Queue

5.什么接口表示可能包含重复元素的有序集合？
A：List
	Collection
		|-- List ： 有序，可重复。
		   |-- ArrayList: 底层使用数组结构。特点:查询速度快，增删稍慢。线程不同步。
		   |-- LinkedList: 底层使用链表数据结构。特点：增删速度块，查询稍慢。
		   |-- Vector: 底层使用的是数组数据结构.1.0出现的。线程同步的。

6.什么接口表示在处理之前保存元素的集合？
A：Queue 
Queue 实现通常不允许插入 null 元素
队列通常（但并非一定）以 FIFO（先进先出）的方式排序各个元素。不过优先级队列和 LIFO 队列（或堆栈）例外，
前者根据提供的比较器或元素的自然顺序对元素进行排序，后者按 LIFO（后进先出）的方式对元素进行排序。
无论使用哪种排序方式，队列的头 都是调用 remove() 或 poll() 所移除的元素。在 FIFO 队列中，所有的新元素都插入队列的末尾。
其他种类的队列可能使用不同的元素放置规则。每个 Queue 实现必须指定其顺序属性。
在处理元素前用于保存元素的 collection。除了基本的 Collection 操作外，队列还提供其他的插入、提取和检查操作。
每个方法都存在两种形式：一种抛出异常（操作失败时），另一种返回一个特殊值（null 或 false，具体取决于操作）。

7.哪个接口代表将键映射到值的类型？
A：Map

8.什么接口代表双端队列？
A:Deque
deque是双端队列，双端队列是元素的线性集合，支持在两个端点处插入和移除元素，Deque接口是比Stack和Queue更丰富的抽象数据类型，
因为它同时实现堆栈和队列。Deque接口定义了访问Deque实例两端元素的方法，提供了插入、移除和检查元素的方法，ArrayDeque和LinkedList等预定义类实现了Deque接口。
Deque接口既可以用作后进先出堆栈，也可以用作先进先出队列，Deque接口中给出的方法分为三个部分:插入，删除和检查。
除了插入、删除和检查Deque实例的这些基本方法之外，Deque接口还有一些更预定义的方法，其中之一是removeFirstOccurence，如果Deque实例中存在指定元素，
则此方法将删除第一个出现的指定元素，如果元素不存在，则Deque实例保持不变。另一种类似的方法是removeLastOccurence，此方法删除Deque实例中最后一次出现的指定元素，
这些方法的返回类型是boolean，如果元素存在于Deque实例中，它们将返回true。

9.列举三种不同的方法来迭代List的元素
A：
	import java.util.ArrayList;
	import java.util.Iterator;
	import java.util.List;

	public class TestList {
		public static void main(String[] args) {
			
			List<String> list = new ArrayList<String>();
			list.add("a");
			list.add("b");
			list.add("c");
			
			//1：通过索引遍历list
			for (int i = 0; i < list.size(); i++) {
				System.out.print(list.get(i));
			}

			//2：迭代器遍历
			for (Iterator<String> it = list.iterator(); it.hasNext(); ) {
				String str = it.next();
				System.out.println(str);
				it.remove();
			}

			//3：while形式
			Iterator<String> i = list.iterator();
			while (i.hasNext()) {
				String s = i.next();
				System.out.print(s);
			}
		}
	}

10.是非题：聚合操作是修改基础集合的变异操作。
A：错。聚合操作不会使基础集合发生变异。实际上，在调用集合的聚合操作时，必须小心不要使它变异。
如果将来在某个时候将流更改为并行流，这样做可能会导致并发问题。 
对聚合操作的使用可以归结为3个部分：
	数据源部分：通过stream()方法，取得集合对象的数据集。
	通过一系列中间（Intermediate）方法，对数据集进行过滤、检索等数据集的再次处理。如使用filter()方法来对数据集进行过滤。
	通过最终（terminal）方法完成对数据集中元素的处理。如使用forEach()完成对过滤后元素的打印。
	
Exercises：
1.编写一个程序，打印其参数。演示如何使用Streams和传统的for语句增强版来打印元素。
A：
	import java.util.Arrays;
	import java.util.Collections;
	import java.util.List;

	public class Test {
		public static void main(String[] args) {
			List<String> list = Arrays.asList(args);
			Collections.shuffle(list);
			list.stream()
					.forEach(a -> System.out.format(a));
			for (String arg : list) {
				System.out.format(arg);
			}
		}
	}
	

2.以该 FindDups示例为例，并将其修改为使用SortedSet而不是Set。指定一个Comparator以便在排序和标识集合元素时忽略大小写。
A：
FindDups.Java

	import java.util.*;

	public class FindDups {
		public static void main(String[] args) {
			Set<String> set = new HashSet<String>();
			for (String string : args)
				   set.add(string);
				   System.out.println(set);
		}
	}
	

3.编写一个采用List<String>并应用于String.trim每个元素的方法。
A:
	List<String> trimStrings = new ArrayList<String)();
	List<String> trimStrings = 
		oriStrings.stream().map(String::trim).collect(Collectors.toList());

4.考虑四个核心接口Set，List，Queue，和Map。对于以下四个分配中的每个分配，指定四个核心接口中的哪个最适合，并说明如何使用它来实现分配。

		1.Whimsical Toys Inc（WTI）需要记录其所有雇员的姓名。每个月，将从这些记录中随机选择一名员工，以获取免费玩具。
		A: List. 0 和 List.size()-1 之间随机选取
		2.WTI决定将每个新产品都以一名员工命名，但只会使用名字，并且每个名称只能使用一次。准备唯一的名字列表。
		A: Set. 不存储重复元素
		3.WTI决定只希望使用最受欢迎的玩具名称。计算每个名字的雇员人数。
		A: Map. 键和值一一映射. 可以通过键来获取值
		4.WTI为当地的长曲棍球队获取季票，由员工共享。为此受欢迎的运动创建一个等待列表。
		A: Queue. add()将员工添加到等待列表中，也可调用remove()删除
		
		
Questions and Exercises: Aggregate Operations
Questions：
1.一系列合计操作称为_Pipeline__。

2.每个管道包含零个或多个_中间操作(Intermediate Operation)__。

3.每个管道以_终止(Terminal operations)_操作结束。

4.哪种操作会产生另一个流作为其输出？
A：中间操作(Intermediate Operation)

5.描述forEach聚合操作与增强型for语句或迭代器不同的一种方式。
A:forEach聚合操作让系统决定迭代的“方式”。使用聚合操作可以使您专注于“什么”而不是“如何”。 

6.是非题：流与集合类似，因为它是一种存储元素的数据结构。
A:错。与集合不同，流不是数据结构。相反，它通过管道携带来自源的值。 

7.在此代码中标识中间操作和终止操作：
	double average = roster
		.stream()
		.filter(p -> p.getGender() == Person.Sex.MALE)
		.mapToInt(Person::getAge)
		.average()
		.getAsDouble();
A：中间操作：filter(); mapToInt();
   终止操作:average();
		
8.该代码 p -> p.getGender() == Person.Sex.MALE 是什么示例？
A：lambda表达式

9.该代码 Person::getAge 是什么示例？
A：:: 是Java新引入的运算符，用于获取方法函数

10.合并流内容并返回一个值的终止操作称为什么？
A：还原操作

11.列出Stream.reduce方法与Stream.collect方法之间的一个重要区别。
A：终止方法可以对集合进行处理，如reduce()、 collect()等等。
reduce()方法的处理方式一般是每次都产生新的数据集，而collect()方法是在原数据集的基础上进行更新，过程中不产生新的数据集。

12.如果你想处理的名称的流，提取男性名字，并将其存储在一个新的List，将Stream.reduce或者 Stream.collect是最合适的操作使用？
A：Stream.collect();更合适

13.是非题：聚合操作使使用非线程安全集合实现并行成为可能。
A：当在操作基础集合并不对其进行修改的情况下，聚合操作可以使得使用非线程安全集合实现并行称为可能。

14.除非另有说明，否则流始终是串行的。您如何请求并行处理流？
A：通过调用parallelStream()而不是获取并行流stream()。parallelStream提供了流的并行处理，它是Stream的另一重要特性，其底层使用Fork/Join框架实现。
可以理解为多线程异步任务的一种实现。parallelstream()的优势是:充分利用多线程,提高程序运行效率。

Exercises：
1.将以下增强型for语句编写为带有lambda表达式的管道。提示：使用 filter中间操作和forEach终端操作。 
	for (Person p : roster) {
		if (p.getGender() == Person.Sex.MALE) {
			System.out.println(p.getName());
		}
	}
	
A：
	roster
		.stream()
		.filter(p -> p.getGender() == Person.Sex.MALE)
		.forEach(p -> System.out.println(p.getName());
	
2.将以下代码转换为使用lambda表达式和聚合操作而不是嵌套for循环的新实现 。提示：请按照filter，sorted和 collect这个顺序调用。
	List<Album> favs = new ArrayList<>();
	for (Album a : albums) {
		boolean hasFavorite = false;
		for (Track t : a.tracks) {
			if (t.rating >= 4) {
				hasFavorite = true;
				break;
			}
		}
		if (hasFavorite)
			favs.add(a);
	}
	Collections.sort(favs, new Comparator<Album>() {
							   public int compare(Album a1, Album a2) {
								   return a1.name.compareTo(a2.name);
							   }});							   
A：
	List<Album> favs = albums.stream()
            .filter(a -> a.tracks.anyMatch(t -> (t.rating >= 4)))
            .sorted(Comparator.comparing(a -> a.name))
            .collect(Collectors.toList());
			

Questions and Exercises: Implementations
Questions：
1.您打算编写使用几个基本集合接口的程序：Set，List，Queue，和Map。您不确定哪种实现效果最佳，因此您决定使用通用实现，直到更好地了解程序在现实世界中的工作方式。这些是哪些实现？
A：
	Set: HashSet
	List: ArrayList
	Queue: LinkedList
	Map: HashMap
	
2.如果您需要一个Set提供按值排序的迭代的实现，则应使用哪个类？
A：TreeSet保证排序后的集合按元素的升序排列，根据元素的自然顺序或Comparator提供的元素进行排序。

3.您使用哪个类访问包装器实现？
A：使用Collections，该类提供可对集合进行操作或返回集合的静态方法。

Exercises：
1.编写一个程序，将第一个命令行参数指定的文本文件读取到List。然后，程序应从文件中打印随机行，第二行命令行参数指定要打印的行数。编写程序，以便一次分配正确大小的集合，而不是在读取文件时逐渐扩展它。
提示：要确定文件中的行数，请使用 java.io.File.length获取文件的大小，然后除以假设的平均线尺寸。				   
A：
	import java.io.BufferedReader;
	import java.io.File;
	import java.io.FileReader;
	import java.io.IOException;
	import java.util.ArrayList;
	import java.util.List;

	public class Test {
		public static void main(String[] args) {
			readFileByLines("d://test.txt");
		}

		public static void readFileByLines(String fileName) {
			File file = new File(fileName);
			int assumedLineLength = 100;
			List<String> fileList =
					new ArrayList<String>((int) (file.length() / assumedLineLength) * 2);
			BufferedReader reader = null;
			try {
				reader = new BufferedReader(new FileReader(file));
				String tempString = null;
				int line = 1;
				while ((tempString = reader.readLine()) != null) {
					fileList.add(reader.readLine());
					System.out.println("line " + line + ": " + tempString);
					line++;
				}
				reader.close();
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				if (reader != null) {
					try {
						reader.close();
					} catch (IOException ioException) {
						System.err.println(ioException);
					}
				}
			}
		}
	}

