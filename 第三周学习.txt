类和对象：
Exercises：
1.写一个类，其实例代表一副纸牌中的一张扑克牌。扑克牌有两个显着特征：rank和suit。
	public class Card {
		private final int rank;
		private final int suit;

		// Kinds of suits
		public final static int DIAMONDS = 1;
		public final static int CLUBS    = 2;
		public final static int HEARTS   = 3;
		public final static int SPADES   = 4;

		// Kinds of ranks
		public final static int ACE   = 1;
		public final static int DEUCE = 2;
		public final static int THREE = 3;
		public final static int FOUR  = 4;
		public final static int FIVE  = 5;
		public final static int SIX   = 6;
		public final static int SEVEN = 7;
		public final static int EIGHT = 8;
		public final static int NINE  = 9;
		public final static int TEN   = 10;
		public final static int JACK  = 11;
		public final static int QUEEN = 12;
		public final static int KING  = 13;

		public Card(int rank, int suit) {
			assert isValidRank(rank);
			assert isValidSuit(suit);
			this.rank = rank;
			this.suit = suit;
		}

		public int getSuit() {
			return suit;
		}

		public int getRank() {
			return rank;
		}

		public static boolean isValidRank(int rank) {
			return ACE <= rank && rank <= KING;
		}

		public static boolean isValidSuit(int suit) {
			return DIAMONDS <= suit && suit <= SPADES;
		}

		public static String rankToString(int rank) {
			switch (rank) {
			case ACE:
				return "Ace";
			case DEUCE:
				return "Deuce";
			case THREE:
				return "Three";
			case FOUR:
				return "Four";
			case FIVE:
				return "Five";
			case SIX:
				return "Six";
			case SEVEN:
				return "Seven";
			case EIGHT:
				return "Eight";
			case NINE:
				return "Nine";
			case TEN:
				return "Ten";
			case JACK:
				return "Jack";
			case QUEEN:
				return "Queen";
			case KING:
				return "King";
			default:
				return null;
			}    
		}
		
		public static String suitToString(int suit) {
			switch (suit) {
			case DIAMONDS:
				return "Diamonds";
			case CLUBS:
				return "Clubs";
			case HEARTS:
				return "Hearts";
			case SPADES:
				return "Spades";
			default:
				return null;
			}    
		}

		public static void main(String[] args) {
			
			assert rankToString(ACE) == "Ace";
			assert rankToString(DEUCE) == "Deuce";
			assert rankToString(THREE) == "Three";
			assert rankToString(FOUR) == "Four";
			assert rankToString(FIVE) == "Five";
			assert rankToString(SIX) == "Six";
			assert rankToString(SEVEN) == "Seven";
			assert rankToString(EIGHT) == "Eight";
			assert rankToString(NINE) == "Nine";
			assert rankToString(TEN) == "Ten";
			assert rankToString(JACK) == "Jack";
			assert rankToString(QUEEN) == "Queen";
			assert rankToString(KING) == "King";

			assert suitToString(DIAMONDS) == "Diamonds";
			assert suitToString(CLUBS) == "Clubs";
			assert suitToString(HEARTS) == "Hearts";
			assert suitToString(SPADES) == "Spades";

		}
	}



2.写一个类，其实例代表一整套卡片。
	import java.util.*;

	public class Deck {

		public static int numSuits = 4;
		public static int numRanks = 13;
		public static int numCards = numSuits * numRanks;

		private Card[][] cards;

		public Deck() {
			cards = new Card[numSuits][numRanks];
			for (int suit = Card.DIAMONDS; suit <= Card.SPADES; suit++) {
				for (int rank = Card.ACE; rank <= Card.KING; rank++) {
					cards[suit-1][rank-1] = new Card(rank, suit);
				}
			}
		}

		public Card getCard(int suit, int rank) {
			return cards[suit-1][rank-1];
		}
	}




3.编写一个小程序来测试你的套牌和卡片类。

	import java.util.*;

	public class DisplayDeck {
		public static void main(String[] args) {
			Deck deck = new Deck();
			for (int suit = Card.DIAMONDS; suit <= Card.SPADES; suit++) {
				for (int rank = Card.ACE; rank <= Card.KING; rank++) {
					Card card = deck.getCard(suit, rank);
					System.out.format("%s of %s",
						card.rankToString(card.getRank()),
						card.suitToString(card.getSuit()));
				}
			}
		}
	}




Questions：
1.以下程序有什么问题？

	public class SomethingIsWrong {
		public static void main(String[] args) {
			Rectangle myRect;
			myRect.width = 40;
			myRect.height = 50;
			System.out.println("myRect's area is " + myRect.area());
		}
	}
	A：代码没有创建myRect对象，运行时会报空指针异常。

2.以下代码创建一个数组和一个字符串对象。代码执行后，对这些对象有多少引用？对象是否有资格进行垃圾回收？

	...
	String[] students = new String[10];
	String studentName = "Peter Parker";
	students[0] = studentName;
	studentName = null;
	...
	A：包含有一个对student数组的引用以及一个对字符串的引用，都没有资格进行垃圾回收，因为student[0]存在着对studentName
	   的引用。
	
	
3.程序如何破坏它创建的对象？
	A：程序没有销毁对象，而是通过对对象的引用设置为null，使其满足垃圾回收的条件，但在实际上没有对创建的对象进行破坏。


Exercises：
1.修复SomethingIsWrong问题1中显示的调用程序。
	public class SomethingIsRight {
		public static void main(String[] args) {
			Rectangle myRect = new Rectangle();
			myRect.width = 40;
			myRect.height = 50;
			System.out.println("myRect's area is " + myRect.area());
		}
	}


2.给定以下类，调用 NumberHolder，编写一些创建类实例的代码，初始化其两个成员变量，然后显示每个成员变量的值。
	public class NumberHolder {
		public int anInt;
		public float aFloat;
	}
	
	A：
	public class NumberHolderDisplay {
		public static void main(String[] args) {
			NumberHolder aNumberHolder = new NumberHolder();
			aNumberHolder.anInt = 1;
			aNumberHolder.aFloat = 2.3f;
			System.out.println(aNumberHolder.anInt);
			System.out.println(aNumberHolder.aFloat);
		}
	}
	
	
	
Questions：
1.该程序 Problem.java无法编译。你需要做什么才能编译？为什么？
	Problem.java：
		public class Problem {
			String s;
			static class Inner {
				void testMethod() {
					s = "Set from Inner";
				}
			}
		}
	A：静态内部类无权访问外部类的字段。应当改为：
	public class ProblemSolved {
		String s;
		class Inner {
			void testMethod() {
				s = "Set from Inner";
			}
		}
	}

	
	
2.使用类的Java API文档 Box（在javax.swing包中）可以帮助您回答以下问题。

	a.静态嵌套类Box定义了什么？
	A：Box.Filler

	b.内部类Box确定了什么？
	A：Box.AccessibleBox

	c.什么是Box内部类的超类？
	A:[java.awt.]Container.AccessibleAWTContainer

	d.Box你可以从任何一个类中使用哪个嵌套类？
	A：Box.Filler

	e.如何创建一个实例Box的Filler类？
	A：new Box.Filler(minDimension, prefDimension, maxDimension)
	
	
	
Exercises:
1.获取文件 Class1.java。编译并运行Class1。输出是什么？
Class1.java:
	public class Class1 {
		protected InnerClass1 ic;
	 
		public Class1() {
			ic = new InnerClass1();
		}
	 
		public void displayStrings() {
			System.out.println(ic.getString() + ".");
			System.out.println(ic.getAnotherString() + ".");
		}
	 
		static public void main(String[] args) {
			Class1 c1 = new Class1();
			c1.displayStrings();
		}
	 
		protected class InnerClass1 {
			public String getString() {
				return "InnerClass1: getString invoked";
			}
	 
			public String getAnotherString() {
				return "InnerClass1: getAnotherString invoked";
			}
		}
	}
	A：输出是：InnerClass1: getString invoked
	           InnerClass1: getAnotherString invoked
	
2.以下练习涉及修改类DataStructure.java，内部类示例部分 讨论了该类 。
DataStructure.java：
	public class DataStructure {
		 
		// Create an array
		private final static int SIZE = 15;
		private int[] arrayOfInts = new int[SIZE];
		 
		public DataStructure() {
			// fill the array with ascending integer values
			for (int i = 0; i < SIZE; i++) {
				arrayOfInts[i] = i;
			}
		}
		 
		public void printEven() {
			 
			// Print out values of even indices of the array
			DataStructureIterator iterator = this.new EvenIterator();
			while (iterator.hasNext()) {
				System.out.print(iterator.next() + " ");
			}
			System.out.println();
		}
		 
		interface DataStructureIterator extends java.util.Iterator<Integer> { } 
	 
		// Inner class implements the DataStructureIterator interface,
		// which extends the Iterator<Integer> interface
		 
		private class EvenIterator implements DataStructureIterator {
			 
			// Start stepping through the array from the beginning
			private int nextIndex = 0;
			 
			public boolean hasNext() {
				 
				// Check if the current element is the last in the array
				return (nextIndex <= SIZE - 1);
			}        
			 
			public Integer next() {
				 
				// Record a value of an even index of the array
				Integer retValue = Integer.valueOf(arrayOfInts[nextIndex]);
				 
				// Get the next even element
				nextIndex += 2;
				return retValue;
			}
		}
		 
		public static void main(String s[]) {
			 
			// Fill the array with integer values and print out only
			// values of even indices
			DataStructure ds = new DataStructure();
			ds.printEven();
		}
	}

	a.定义一个名为的方法print(DataStructureIterator iterator)。使用类的实例调用此方法，
	  EvenIterator以便它执行与方法相同的功能printEven。

	b.调用该方法，print(DataStructureIterator iterator)以便它打印具有奇数索引值的元素。
	  使用匿名类作为方法的参数，而不是接口的实例DataStructureIterator。

	c.定义一个名为print(java.util.Function<Integer, Boolean> iterator)执行相同功能的
	  方法print(DataStructureIterator iterator)。使用lambda表达式调用此方法以打印具有偶数索引值的元素。
      使用lambda表达式再次调用此方法以打印具有奇数索引值的元素。

	d.定义两个方法，以便以下两个语句打印具有偶数索引值的元素和具有奇数索引值的元素：
		DataStructure ds = new DataStructure()
		// ...
		ds.print(DataStructure::isEvenIndex);
		ds.print(DataStructure::isOddIndex);
		
	A:
	public class DataStructure {

		private final static int SIZE = 15;
		private int[] arrayOfInts = new int[SIZE];
		
		public DataStructure() {
			for (int i = 0; i < SIZE; i++) {
				arrayOfInts[i] = i;
			}
		}
		
		public int size() {
			return SIZE;
		}
		
		public int get(int index) {
			return arrayOfInts[index];        
		}
		
		interface DataStructureIterator extends java.util.Iterator<Integer> { }
		
		private class EvenIterator implements DataStructureIterator {
			
			private int nextIndex = 0;
					
			public boolean hasNext() {
				return (nextIndex <= SIZE - 1);
			}        
			
			public Integer next() {
				Integer retValue = Integer.valueOf(arrayOfInts[nextIndex]);
				nextIndex += 2;
				return retValue;
			}
		}
		
		public DataStructureIterator getEvenIterator() {
			return new EvenIterator();
		}
		
		public void printEven() {
			DataStructureIterator iterator = getEvenIterator();
			while (iterator.hasNext()) {
				System.out.print(iterator.next() + " ");
			}
			System.out.println();
		}

		public void print(DataStructureIterator iterator) {
			while (iterator.hasNext()) {
				System.out.print(iterator.next() + " ");
			}
			System.out.println();
		}
		
		public void print(java.util.function.Function<Integer, Boolean> function) {
			for (int i = 0; i < SIZE; i++) {
				if (function.apply(i)) {
					System.out.print(arrayOfInts[i] + " ");
				}
			}
			System.out.println();
		}
		
		public static Boolean isEvenIndex(Integer index) {
			if (index % 2 == 0) return Boolean.TRUE;
			return Boolean.FALSE;
		}
		
		public static Boolean isOddIndex(Integer index) {
			if (index % 2 == 0) return Boolean.FALSE;
			return Boolean.TRUE;
		}

		public static void main(String s[]) {
			
			DataStructure ds = new DataStructure();
			
			System.out.println("printEven()");
			ds.printEven();
			
			System.out.println("print(DataStructureIterator) with "    
				+ "getEvenIterator");
			ds.print(ds.getEvenIterator());
			
			System.out.println("print(DataStructureIterator) with "
				+ "anonymous class, odd indicies");
			ds.print(
				new DataStructure.DataStructureIterator() {
					private int nextIndex = 1;
					public boolean hasNext() {
						return (nextIndex <= ds.size() - 1);
					}
					public Integer next() {
						int retValue = ds.get(nextIndex);
						nextIndex += 2;
						return retValue;
					}
				}
			);
			
			System.out.println("print(Function) with lambda expressions");
			ds.print(index -> {
				if (index % 2 == 0) return Boolean.TRUE;
				return Boolean.FALSE;
			});
			ds.print(index -> {
				if (index % 2 == 0) return Boolean.FALSE;
				return Boolean.TRUE;
			});
			
			System.out.println("print(Function) with method references");
			ds.print(DataStructure::isEvenIndex);
			ds.print(DataStructure::isOddIndex);
		}
	}
	
Questions:
	1.对或错：Enum类型可以是java.lang.String的子类。
	A：错误。所有枚举都隐式扩展了java.lang.Enum.因为类只能扩展一个父类，所以Java不支持多继承，因此枚举不能
	扩展其他内容。
	
	
Exercises:
	1.重写card,便它表示具有枚举类型的卡片的rank和suit。
	public class Card3 {
		private final Rank rank;
		private final Suit suit;

		public Card3(Rank rank, Suit suit) {
			this.rank = rank;
			this.suit = suit;
		}

		public Suit getSuit() {
			return suit;
		}

		public Rank getRank() {
			return rank;
		}

		public String toString() {
			return rank + " of " + suit;
		}
	}
	
	public enum Suit { 
	   DIAMONDS, 
	   CLUBS, 
	   HEARTS, 
	   SPADES 
	}
	
	public enum Rank { 
	   ACE, DEUCE, THREE, FOUR, FIVE, SIX, SEVEN,
	   EIGHT, NINE, TEN, JACK, QUEEN, KING
	}
	
	
	2.重写Deck类
	
	import java.util.*;

	public class Deck3 {
		private static Card3[] cards = new Card3[52];
		public Deck3() {
			int i = 0;
			for (Suit suit : Suit.values()) {
				for (Rank rank : Rank.values()) {
					cards[i++] = new Card3(rank, suit);
				}
			}
		}
	}
	
	
	

	
注释：
	
Questions：
1. 下面接口存在什么问题？
	public interface House {
		@Deprecated
		void open();
		void openFrontDoor();
		void openBackDoor();
	}

	A：应当添加注释解释为什么不鼓励使用open方法，推荐使用哪个方法
	
2.分析问题1中所示的House接口的这种实现：
	public class MyHouse implements House {
		public void open() {}
		public void openFrontDoor() {}
		public void openBackDoor() {}
	}
	如果编译此程序，编译器会生成警告，因为open已弃用。你能做些什么来解决这个警告？

	A：可以使用@Deprecated注解来解决警告或者使用@SuppressWarnings("deprecation")注解来取消警告

3.以下代码是否会编译而不会出错？
	public @interface Meal { ... }

	@Meal("breakfast", mainDish="cereal")
	@Meal("lunch", mainDish="pizza")
	@Meal("dinner", mainDish="salad")
	public void evaluateDiet() { ... }
	
	A：无法编译。JDK 8之前不支持重复注释。从JDK 8开始，代码无法编译，因为Meal注释类型没有定义为可重复。
	可以通过添加@Repeatable来修复。
	
	@java.lang.annotation.Repeatable(MealContainer.class)
	public @interface Meal { ... }

	public @interface MealContainer {
		Meal[] value();
	}


Exercises：
1.定义元素id，synopsis，engineer，和date的注释类型并制定engineer和date的默认值
	A：
	/**
	 * 描述注释类型
	 */
	public @interface RequestForEnhancement {
		int id();
		String synopsis();
		String engineer() default "[unassigned]";
		String date() default "[unknown]";
	}











