Questions and Exercises: Exceptions

Questions:
	1.下面代码合法吗
		try {
			
		} finally {
			
		}
		
	A:是合法的而且很有必要。finally关键字用来创建在try代码块后面执行的代码块。无论是否发生异常，
	finally代码块中的代码总是会执行的。在finally代码块中，可以运行清理类型等收尾善后性质的语句。
	finally代码块在catch代码块最后，语法如下：
		try{
			//code
		}catch(Exception e){
			//code
		}finally{
			//code
		}
	注意：
		catch不能独立于try存在
		在try/catch后面添加finally块不是强制性要求的
		try代码后不能既没有catch也没有finally
		try,catch,finally之间不能添加任何代码
		
	2.以下处理程序可以捕获哪些异常类型？
		catch (Exception e) {
		 
		}	
	使用这种类型的异常处理程序有什么问题？
	
	A:Exception:异常可分为运行时异常和编译异常
		1.运行时异常：即RuntimeException。这类异常在代码编写的时候不会被编译器所检测出来，是可以不需要被
		  捕获，但是也可以根据需要进行捕获抛出。常见的RuntimeException有：NullpointException(空指针异常)
		  ，ClassCastException(类型转换异常)，IndexOutOfBoundsException(数组越界异常)等。
		2.编译异常：RuntimeException意外的异常。这类异常在编译时编译器会提示需要捕获，如果不进行捕获则编译
		  错误。常见的编译异常有IOException(流传输异常)，SQLException(数据库操作异常)等。
		  
		直接抛Exception的话，不能够很快定位到错误的原因，通常自定义Exception。
	
	3.编写的以下异常处理程序有什么问题吗？这段代码可以编译吗？
		try {

		} catch (Exception e) {
			
		} catch (ArithmeticException a) {
			
		}
		
	A：程序不会编译，因为Exception会捕获所有类型的异常包括ArithmeticException，因此程序不会进入到第二个catch
	   代码块。
	
	4.将第一个列表中的每种情况与第二个列表中的项目进行匹配。
		a.	int[] A;
			A[0] = 0;
		b.JVM开始运行程序，但是JVM找不到Java类。（Java类位于classes.zip或rt.jar）
		c.程序正在读取流并到达流结束标记。
		d.在关闭流之前且到达流结束标记之后，程序尝试再次读取流。
		
		1.__error
		2.__checked exception
		3.__compile error
		4.__no exception
		
	A：a-->3   数组没有初始化，会报编译错误 
	   b-->1   JVM运行程序的时候主要是做类的加载和类的执行，JVM只有在程序第一次主动使用类的时候才去加载类，
	           而且只加载一次，如果JVM找不到java类，这种情况属于严重错误。
	   c-->4   一个程序读取流至流标记结束的位置
	   d-->2   在流关闭之前，流结束标记之后，程序尝试又一次读取流属于checked exception，必须进行捕获。
		
Exercises:
	1.ListOfNumbers.java中添加一个readList方法。此方法应从int文件中读取值，打印每个值，并将它们附加到
	向量的末尾。您应该捕获所有适当的错误。您还需要一个包含数字的文本文件才能读入。
	ListOfNumbers.java
		import java.io.*;
		import java.util.List;
		import java.util.ArrayList;
		 
		public class ListOfNumbers {
			private List<Integer> list;
			private static final int SIZE = 10;
		 
			public ListOfNumbers () {
				list = new ArrayList<Integer>(SIZE);
				for (int i = 0; i < SIZE; i++)
					list.add(new Integer(i));
			}
			public void writeList() {
				PrintWriter out = null;
		 
				try {
					System.out.println("Entering try statement");
					out = new PrintWriter(new FileWriter("OutFile.txt"));
				 
					for (int i = 0; i < SIZE; i++)
						out.println("Value at: " + i + " = " + list.get(i));
				} catch (IndexOutOfBoundsException e) {
					System.err.println("Caught IndexOutOfBoundsException: " +
										 e.getMessage());
				} catch (IOException e) {
					System.err.println("Caught IOException: " + e.getMessage());
				} finally {
					if (out != null) {
						System.out.println("Closing PrintWriter");
						out.close();
					} else {
						System.out.println("PrintWriter not open");
					}
				}
			}
		}
	A:
		import java.io.FileNotFoundException;
		import java.io.FileWriter;
		import java.io.IOException;
		import java.io.PrintWriter;
		import java.io.RandomAccessFile;
		import java.util.ArrayList;
		import java.util.List;

		public class ListOfNumbers {
			private List<Integer> list;
			private static final int SIZE = 10;

			public ListOfNumbers () {
				list = new ArrayList<Integer>(SIZE);
				for (int i = 0; i < SIZE; i++)
					list.add(new Integer(i));
				this.readList("int.txt");
				this.writeList();
			}
			public void readList(String fileName){
				try {
					RandomAccessFile file = new RandomAccessFile(fileName, "int");
					while (file.readLine() != null){
						Integer integer = Integer.parseInt(file.readLine());
						list.add(integer);
						System.out.println(integer);
					}
				}catch (FileNotFoundException fnfe){
					System.err.println(fileName + "has not found");
				} catch (IOException ioe){
					System.err.println(ioe.toString());
				}
			}
			public void writeList() {
				PrintWriter out = null;

				try {
					System.out.println("Entering try statement");
					out = new PrintWriter(new FileWriter("OutFile.txt"));

					for (int i = 0; i < SIZE; i++)
						out.println("Value at: " + i + " = " + list.get(i));
				} catch (IndexOutOfBoundsException e) {
					System.err.println("Caught IndexOutOfBoundsException: " +
						e.getMessage());
				} catch (IOException e) {
					System.err.println("Caught IOException: " + e.getMessage());
				} finally {
					if (out != null) {
						System.out.println("Closing PrintWriter");
						out.close();
					} else {
						System.out.println("PrintWriter not open");
					}
				}
			}
			public static void main(String[] args){
				new ListOfNumbers();
			}
		}
		
	2.修改以下cat方法，使其可以编译。
		public static void cat(File file) {
			RandomAccessFile input = null;
			String line = null;

			try {
				input = new RandomAccessFile(file, "r");
				while ((line = input.readLine()) != null) {
					System.out.println(line);
				}
				return;
			} finally {
				if (input != null) {
					input.close();
				}
			}
		}
	A:
		public static void cat(File file) {
			RandomAccessFile input = null;
			String line = null;

			try {
				input = new RandomAccessFile(file, "r");
				while ((line = input.readLine()) != null) {
					System.out.println(line);
				}
				return;
			}catch(FileNotFoundException fnf){
				System.err.println("File has not found");
			}catch (IOException ioe){
				System.err.println(ioe.toString());
			} finally {
				if (input != null) {
					try{
						input.close();
					}catch(IOException ioe){
						System.err.println(ioe.toString());
					}
				}
			}
		}

Questions and Exercises: Basic I/O

Questions：
	1.您将使用哪种类和方法读取大文件末尾附近已知位置的几段数据？
	
	A:Java7中引入了SeekableByteChannel接口，允许我们定位到文件的任意位置进行读写。
	  这里的写，不是新增式的插入，而是覆盖，如果在文件末尾进行写，则是新增。
	  
	2.调用时format，指示换行的最佳方法是什么？
	
	A：换行符用到的是%n;
	
	3.您如何确定文件的MIME类型？
	
	A:可以使用nio与javax.activation 结合的方法，代码如下：
		public String getContentType() {
			//利用nio提供的类判断文件ContentType
			Path path = Paths.get(getUri());
			String content_type = null;
			try {
				content_type = Files.probeContentType(path);
			} catch (IOException e) {
				logger.error("Read File ContentType Error");
			}
			//若失败则调用另一个方法进行判断
			if (content_type == null) {
				content_type = new MimetypesFileTypeMap().getContentType(new File(getUri()));
			}
			return content_type;
		}
	4.您将使用哪种方法确定文件是否为符号链接？
	
	A：可以使用isSymbolicLink方法：
		private static boolean isSymbolicLink(File f) throws IOException {
			return !f.getAbsolutePath().equals(f.getCanonicalPath());
		}


Exercises：
	1.编写一个示例，计算一个特定字符（例如e）在文件中出现的次数。可以在命令行中指定字符。
	
	A：
		import java.io.BufferedReader;
		import java.io.File;
		import java.io.FileNotFoundException;
		import java.io.FileReader;
		import java.io.IOException;
		import java.util.Scanner;

		public class Count {
			public static void main(String[] args) {
				System.out.println("请输入文本路径:");
				Scanner scanner = new Scanner(System.in);
				String path = scanner.nextLine();
				scanner.close();
				File file = new File(path);
				char chars = 'e';
				int count = process(file, chars);
				System.out.println("字符e" + chars + "在文档中出现的次数为：" + count);
			}

			public static int process(File file, char c) {
				int count = 0;
				BufferedReader br = null;
				try {
					br = new BufferedReader(new FileReader(file));
					String temp = "";
					while ((temp = br.readLine()) != null) {
						char[] chars = temp.trim().toCharArray();
						for (int i = 0; i < chars.length; i++) {
							if (chars[i] == c){
								count++;
							}
						}
					}
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				} finally {
					try {
						br.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				return count;
			}
		}
		
	2.数据文件以一个long开头并告诉你同一文件中单个int数据的偏移量。编写一个获取整型数据的程序。
	
	A：
		import java.io.IOException;
		import java.nio.ByteBuffer;
		import java.nio.channels.SeekableByteChannel;
		import java.nio.file.Files;
		import java.nio.file.Path;
		import java.nio.file.Paths;
		import java.nio.file.StandardOpenOption;
		import java.util.EnumSet;

		public class FindInt {
			private Path path;

			private FindInt(Path path) {
				this.path = path;
			}

			public static void main(String[] args) {
				Path path = Paths.get("", "datafile.txt");
				int num = new FindInt(path).seek();
				System.out.println("int " + num);
			}

			public int seek() {
				int num = 0;
				try (SeekableByteChannel seekableByteChannel = Files.newByteChannel(path,
					EnumSet.of(StandardOpenOption.READ))) {
					ByteBuffer buffer = ByteBuffer.allocate(100);//定义缓冲区大小
					while (seekableByteChannel.read(buffer) > 0) {
						seekableByteChannel.position(buffer.getLong(0));//设置当前的position 到指定位置
						buffer.rewind();
						seekableByteChannel.read(buffer);
						num = buffer.getInt(0);
					}
				} catch (IOException e) {
					System.err.println(e);
				}
				return num;
			}
		}
		
Questions and Exercises: Concurrency

Questions：
1.您可以将Thread传递给Executor.execute吗？这样的调用有意义吗？

A： Thread类实现Runnable接口，所以你可以传递一个Thread的实例到Executor.execute。 
	但是这样使用Thread对象不起任何作用没什么意义。如果这个对象是Thread的一个直接实例，
	它的run方法是空的，没有实现，不做任何事情。

Exercises：
	1.编译并运行 BadThreads.java：
	
	public class BadThreads {
	 
		static String message;
	 
		private static class CorrectorThread
			extends Thread {
	 
			public void run() {
				try {
					sleep(1000); 
				} catch (InterruptedException e) {}
				// Key statement 1:
				message = "Mares do eat oats."; 
			}
		}
	 
		public static void main(String args[])
			throws InterruptedException {
	 
			(new CorrectorThread()).start();
			message = "Mares do not eat oats.";
			Thread.sleep(2000);
			// Key statement 2:
			System.out.println(message);
		}
	}
	这个程序应该打印出"Mares do eat oats."它是否保证一直这样做？如果不，为什么？
	它是否会改变这个睡眠参数？你会如何保证在主程序中所有的message都是可见的？
	
	A：不能保证总是打印Mares do eat oats.因为无法保证Mares do eat oats.和Mares do not eat oats.之间的
	happens-before关系。happens-before规则出现的原因：因为jvm会对代码进行编译优化，指令会出现重新排序
	情况，为了避免编译优化对并发编程安全性的影响，需要happens-before规则定义一些禁止编译优化的场景，保证
	并发编程的正确性。jdk1.5之后对volatile的语义进行了增强，可以将message声明为volatile，可以确保两个
	message之间的happens-before关系。
	volatile赋予了变量可见，即禁止编译器对成员变量进行优化，它修饰的成员变量在每次被线程访问时，都强迫从
	内存中重读该成员变量的值。而且，当成员变量发生变化时，强迫线程将变化值回写到共享内存，这样在任何时刻
	两个不同线程总是看到某一成员变量的同一个值，这就保证了可见性。简单来说就是读必须从主内存读，写必须写到
	主内存中。因为使用volatile屏蔽了编译器中必要的代码优化，所以在效率上较低，在必要时才使用该关键字。
	
	
	2.修改Guarded Blocks中的生产者－消费者示例，以使用标准库类而不是Drop该类。	
Guarded Blocks:
Drop类：
	public class Drop {
		// Message sent from producer
		// to consumer.
		private String message;
		// True if consumer should wait
		// for producer to send message,
		// false if producer should wait for
		// consumer to retrieve message.
		private boolean empty = true;

		public synchronized String take() {
			// Wait until message is
			// available.
			while (empty) {
				try {
					wait();
				} catch (InterruptedException e) {}
			}
			// Toggle status.
			empty = true;
			// Notify producer that
			// status has changed.
			notifyAll();
			return message;
		}

		public synchronized void put(String message) {
			// Wait until message has
			// been retrieved.
			while (!empty) {
				try { 
					wait();
				} catch (InterruptedException e) {}
			}
			// Toggle status.
			empty = false;
			// Store message.
			this.message = message;
			// Notify consumer that status
			// has changed.
			notifyAll();
		}
	}
	
Producer：
	import java.util.Random;

	public class Producer implements Runnable {
		private Drop drop;

		public Producer(Drop drop) {
			this.drop = drop;
		}

		public void run() {
			String importantInfo[] = {
				"Mares eat oats",
				"Does eat oats",
				"Little lambs eat ivy",
				"A kid will eat ivy too"
			};
			Random random = new Random();

			for (int i = 0;
				 i < importantInfo.length;
				 i++) {
				drop.put(importantInfo[i]);
				try {
					Thread.sleep(random.nextInt(5000));
				} catch (InterruptedException e) {}
			}
			drop.put("DONE");
		}
	}
	
Consumer：
	import java.util.Random;

	public class Consumer implements Runnable {
		private Drop drop;

		public Consumer(Drop drop) {
			this.drop = drop;
		}

		public void run() {
			Random random = new Random();
			for (String message = drop.take();
				 ! message.equals("DONE");
				 message = drop.take()) {
				System.out.format("MESSAGE RECEIVED: %s%n", message);
				try {
					Thread.sleep(random.nextInt(5000));
				} catch (InterruptedException e) {}
			}
		}
	}
	
	A：分析：经典的“生产者”和“消费者”模型中，通过队列可以很便利地实现两者之间的数据共享。
	   生产者线程把准备好的数据共享给消费者线程，可以利用队列的方式来传递数据来解决他们之间的数据共享问题。
	   阻塞队列(BlockingQueue)常用于生产者和消费者的场景，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。
	   阻塞队列就是生产者存放元素的缓存容器，而消费者也只从容器里拿元素。
	修改：
	Producer：
		import java.util.Random;
		import java.util.concurrent.BlockingQueue;

		public class Producer implements Runnable {
			private BlockingQueue<String> drop;

			public Producer(BlockingQueue<String> drop) {
				this.drop = drop;
			}

			public void run() {
				String importantInfo[] = {
					"Mares eat oats",
					"Does eat oats",
					"Little lambs eat ivy",
					"A kid will eat ivy too"
				};
				Random random = new Random();

				try {
					for (int i = 0; i < importantInfo.length; i++) {
						drop.put(importantInfo[i]);
						Thread.sleep(random.nextInt(5000));
					}
					drop.put("DONE");
				} catch (InterruptedException e) {
					System.err.println(e);
				}
			}
		}
	
	Consumer：
		import java.util.Random;
		import java.util.concurrent.BlockingQueue;

		public class Consumer implements Runnable {
			private BlockingQueue<String> drop;

			public Consumer(BlockingQueue<String> drop) {
				this.drop = drop;
			}

			public void run() {
				Random random = new Random();
				try {
					for (String message = drop.take();
						 ! message.equals("DONE");
						 message = drop.take()) {
						System.out.format("MESSAGE RECEIVED: %s%n", message);
						Thread.sleep(random.nextInt(5000));
					}
				} catch (InterruptedException e) {
					System.err.println(e);
				}
			}
		}
	
Questions and Exercises: The Platform Environment

Questions:
	1.程序员安装一个包含在.jar文件中的新库。为了从他的代码访问该库，他将CLASSPATH环境变量
	设置为指向新的.jar文件。现在，他发现在尝试启动简单应用程序时收到错误消息：
		java Hello
		Exception in thread "main" java.lang.NoClassDefFoundError: Hello
	在这种情况下，Hello该类将编译到当前目录中的.class文件中-但是该java命令似乎找不到它。存在什么问题
	
	A：类只有出现在类路径中时，才能找到该类。默认情况下，类路径由当前目录组成的。如果设置了classpath环境变量，
	   不包含当前目录，那么启动器将无法在当前目录中找到类。在配置环境变量时应当将classpath改为当前目录。
	
Exercises：
	编写PersistentEcho程序具有以下功能：

	1.如果PersistentEcho使用命令行参数运行，则会打印出这些参数。它还将打印出的字符串保存到属性中，并将属性保存到名为PersistentEcho.txt
	2.如果PersistentEcho在没有命令行参数的情况下运行，它将查找名为PERSISTENTECHO的环境变量。
	如果该变量存在，则PersistentEcho输出其值，并以与处理命令行参数相同的方式保存该值。
	3.如果PersistentEcho在不使用命令行参数的情况下运行，并且未定义PERSISTENTECHO环境变量，它将从中检索属性值PersistentEcho.txt并将其打印出来。
	
	A：
		import java.io.FileInputStream;
		import java.io.FileOutputStream;
		import java.io.IOException;
		import java.util.Properties;

		public class PersistentEcho {
			public static void main(String[] args) {
				String argString = "";
				boolean notProperty = true;

				if (args.length > 0) {
					for (String arg : args) {
						argString += arg + " ";
					}
					argString = argString.trim();
				} else if ((argString = System.getenv("PersistentEcho")) != null) {//获取指定的环境变量的值
				} else {
					notProperty = false;
					argString = null;
					FileInputStream fileInputStream = null;
					try {
						fileInputStream = new FileInputStream("PersistentEcho.txt");
						Properties inProperties = new Properties();
						inProperties.load(fileInputStream);
						argString = inProperties.getProperty("argString");
					} catch (IOException e) {
						System.err.println(e);
					} finally {
						if (fileInputStream != null) {
							try {
								fileInputStream.close();
							} catch (IOException e) {
								System.err.println(e);
							}
						}
					}
				}
				if (argString == null) {
					System.err.println("Couldn't find argString property");
				}
				System.out.println(argString);
				if (notProperty) {
					Properties outProperties = new Properties();
					outProperties.setProperty("argString", argString);
					FileOutputStream fileOutputStream = null;
					try {
						fileOutputStream = new FileOutputStream("PersistentEcho.txt");
						outProperties.store(fileOutputStream, "PersistentEcho properties");
					} catch (IOException e) {
						System.err.println(e);
					} finally {
						if (fileOutputStream != null) {
							try {
								fileOutputStream.close();
							} catch (IOException e) {
								System.err.println(e);
							}
						}
					}
				}
			}
		}

Questions and Exercises: Regular Expressions

Questions：
	1.java.util.regex包中的三个公共类是什么？描述每个目的。
	
	A：java.util.regex包主要包含Pattern,Matcher,PatternSyntaxException三个类:
	   (1)Pattern类代表了正则表达式，可以看作是正则表达式的编译表示
	   (2)Matcher类是对输入字符串进行解释和匹配操作的引擎，根据规则进行匹配
	   (3)PatternSyntaxException代表一个正则表达式中出现语法错误

	2.思考字符串文字"foo"。什么是开始索引？结束索引是什么？解释这些数字的含义。
	
	A：每个字符处于自己相应的单元格中，开始索引为0，结束索引为3，该字符串占用了单元格0,1,2
	
	3.普通字符和元字符有什么区别？举一个例子。
	
	A：普通字符：
			大多数的字符仅能够描述它们本身，这些字符称作普通字符，例如所有的字母和数字。
			也就是说普通字符只能够匹配字符串中与它们相同的字符。
	   元字符：
			由于普通字符只能匹配与自身相同的字符，那么正则表达式的灵活性和强大的匹配功能就不能完全展现，
			于是正则表达式中规定了一系列的特殊字符，这些字符不是按照字符的直接量进行匹配的，而是具有特殊的语义，
			如：^ $ . * + ? = ! : | \ / ( ) [ ] { }
			虽然说上面的字符具有特殊含义，但是一些字符只有在某些上下文环境中才具有特殊的含义。
			
	4.如何强制元字符表现得像普通字符？
	
	A：有以下方法：
		1.在元字符前加反斜杠（\）；
		2.将元字符括在引号表达式中\Q（在开头）和\E（在结尾）
		
	5.您怎么称呼括在方括号中的一组字符？这是为了什么
	
	A：这是一个字符类，它是一个字符集，如果字符集中的任何一个字符有匹配，它就会找到该匹配项。
	
	6.这里有三个预定义字符类：\d，\s，和\w。描述每个，并使用方括号将其重写。
	
	A： \d	匹配任何数字。	[0-9]
		\s	匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]
		\w	匹配任何单词字符。	[a-zA-Z_0-9]
		
	7.对于每一个\d，\s以及\w，写入2个匹配该简单的表达式相反的字符集。
	
	A： \d	\D	[^\d]
		\s	\S	[^\s]
		\w	\W	[^\w]
		
	8.考虑正则表达式(dog){3}。标识两个子表达式。表达式匹配什么字符串？
	
	A：由要匹配的组(dog)以及匹配优先量词{3}组成，匹配的字符串为dogdogdog
	
Exercises:
	1.仅当该人的名字和姓氏相同时，才使用后向引用来编写与该人的名字匹配的表达式。
	
	A：([A-Z][a-zA-Z]*)\s\1
	
	
	
	
	
	
	
	
	
	
	
	
	